=head1 Body Methods

These methods are accessible via the C</body> URL.


=head2 get_status ( session_id, body_id )

Returns detailed statistics about a planet. 

B<NOTE:> You should probably B<never> call this method directly, as it is a wasted call since the data it returns comes back in the status block of every relevant request. See L<Intro/"Status"> for details.

 {
    "server" : { ... },
    "empire" : { ... },
    "body" : {
        "id" : "id-goes-here",
        "x" : -4,
        "y" : 10,
        "star_id" : "id-goes-here",
        "star_name" : "Sol",
        "orbit" : 3,
        "type" : "habitable planet",
        "name" : "Earth",
        "image" : "p13",
        "size" : 67,
        "water" : 900,
        "ore" : {
            "gold" : 3399,
            "bauxite" : 4000,
            ...
        },
        "empire" : { # this section only exists if an empire occupies it
            "id" : "id-goes-here",
            "name" : "Earthlings",
            "alignment" : "none",   # can be 'ally','self', or 'hostile'
        }
        
        --------- if you own the planet the data below will be included ---------
        
        "needs_surface_refresh" : 1, # indicates that the client needs to call get_buildings() because something has changed
        "building_count" : 7,
        "happiness" : 3939,
        "happiness_hour" : 25,
        "food_stored" : 33329,
        "food_capacity" : 40000,
        "food_hour" : 229,
        "energy_stored" : 39931,
        "energy_capacity" : 43000,
        "energy_hour" : 391,
        "ore_hour" 284,
        "ore_capacity" 35000,
        "ore_stored" 1901,
        "waste_hour" : 933,
        "waste_stored" : 9933,
        "waste_capacity" : 13000,
        "water_stored" : 9929,
        "water_hour" : 295,
        "water_capacity" : 51050,
    }
 }
 
=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve.


=head2 get_buildings ( session_id, body_id )

Retrieves a list of the buildings on a planet. The surface of all planet's is made up of an 11x11 tile grid stretching from -5 to 5 in both an x and y axis. The planetary command building is always built at 0,0. 

The C<get_body> method (among others) will give you C<size> and C<building_count>. A planet's size is the number of buildings that can be built on it. The building count is the number of buildings you have built so far. The maximum size of any planet is 121 (11x11=121), however just because there are spots remaining doesn't mean you can fill them. Also, sometimes permanent structures such as lakes will occupy a tile space, and can artificially lower the number of buildings you can place on a planet.

The list of building's retreived by this method should be placed on the 11x11 grid, and the extra space should be filled in by blank ground tiles. 

 {
    "buildings" : {
        "id-goes-here" : {
            "name" : "Apple Orchard",
            "x" : 1,
            "y" : -1,
            "url" : "/apple",
            "level" : 3,
            "image" : "apples3",
            "efficiency" : 95,
            "pending_build" : {                            # only included when building is building/upgrading
                "seconds_remaining" : 430,
                "start" : "01 31 2010 13:09:05 +0600",
                "end" : "01 31 2010 18:09:05 +0600"
            },
            "work" : {                                     # only included when building is working (Parks, Waste Recycling, etc)
                "seconds_remaining" : 49,
                "start" : "01 31 2010 13:09:05 +0600",
                "end" : "01 31 2010 18:09:05 +0600"
            }
        },
        "id-goes-here2" : {
            "name" : "Planetary Command",
            "x" : 0,
            "y" : 0,
            "url" : "/command",
            "level" : 1,
            "efficiency" : 100,
            "image" : "command1"
        }
    },
    "body" : {
        "surface_image" : "surface-e"
    },
    "status" : { ... }
 }

Throws 1002 and 1010.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve the buildings on.



=head2 get_buildable ( session_id, body_id, x, y, tag ) 

Provides a list of all the building types that are available to be built on a given space on a planet that are within a specific tag.

 {
    "max_items_in_build_queue" : 6,
    "build_queue" : {
        "max" : 4,
        "current" : 3
    },
    "buildable" : {
        "Wheat Farm" : {
            "url" :"/wheat",
            "build" : {
                "can" : 1,
                "cost" : {
                    "food" : 500,
                    "water" : 500,
                    "energy" : 500,
                    "waste" : 500,  # is added to your storage, not spent like the other resources
                    "ore" : 1000,
                    "time" : 1200,
                },
                "tags" : ["Now","Resources","Food"],
                "reason" : ""
            },
            "image" : "wheat1",
            "production" : {
                "food_hour" : 1500,
                "energy_hour" : -144,
                "ore_hour" : -1310,
                "water_hour" : -1100,
                "waste_hour" : 133,
                "happiness_hour" : 0,
            }
        },
        ...
    },
    "status" : { ... }
 }

The C<reason> section provides a little detail about why a building can or cannot be built. It is formatted the same way an exception would be formatted (an array ref of error code, error message, and error data).

The C<tags> section can be used to display the buildable buildings in a way that makes sense to the end user. The tags available are as follows:

=over

=item Now

Can be built right now.

=item Soon

Could be built right now if only there were enough resources in storage.

=item Later

Will eventually become available once you've completed the necessary prerequisites.

=item Plan

This building will be built using a Plan, which means it will cost no resources to build.

=item Infrastructure

Everything that is not a resource building.

=over

=item Intelligence

This building helps you gain information.

=item Happiness

This building helps you gain favor with your citizens.

=item Ships

This building helps you build ships.

=item Colonization

This building helps you colonize other worlds.

=item Construction

This building helps in some way building buildings on your planet surface.

=item Trade

This building allows you to trade good or resources with other players, or assists in trade in some way.

=back

=item Resources

Everything that is not infrastructure.

=over

=item Food

This building either produces or stores food.

=item Ore

This building either produces or stores ore.

=item Water

This building either produces or stores water.

=item Energy

This building either produces or stores energy.

=item Waste

This building either consumes or stores waste.

=item Storage

This building provides storage for one or more of the five resources.

=back

=back

Throws 1002, 1010, 1011, and 1012, and 1013.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve the buildings on.

=head3 x

The x axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 y

The y axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 tag

A tag that will limit the list of buildings to return. Required. Cannot be C<Now>, C<Soon>, or C<Later>, but all other tags are fair game.




=head2 rename ( session_id, body_id, name )

Renames a body, provided the empire attached to the session owns the body. Returns a 1 on success.

Throws 1000, 1002 and 1010.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to rename.

=head3 name

The new name of the body.



=head2 abandon ( session_id, body_id )

Abandon's a colony, and destroys everything on the planet. Returns

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 body_id

The unique id of the body you wish to abandon. You cannot abandon your home planet.



=cut


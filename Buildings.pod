=head1 Building Methods

All buildings have some methods in common. This is a description of the methods available from each building.

B<NOTE:> To use these methods, you must use the URL of the individual building types. You can find the list of building types at the bottom of this page.

=head2 build ( session_id, body_id, x, y )

Adds this building to the planet's build queue. Returns:

 {
    "building" : {
        "id" : "id-goes-here",
        "pending_build" : {
            "seconds_remaining" : 430,
            "start" : "01 31 2010 13:09:05 +0600",
            "end" : "01 31 2010 18:09:05 +0600"
        },
        "level" : 0,
    "status" : { ... }
 }

Throws 1002, 1010, 1011, and 1012, and 1013.

=head3 session_id

A session id.

=head3 planet_id

The id of the planet you wish to build on.

=head3 x

The x axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 y

The y axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.




=head2 view ( session_id, building_id )

Retrieves the properties of the building.

 {
    "building" : {
        "id" : "id-goes-here",
        "name" : "Planetary Command",
        "image" : "command6",
        "level" : 6,
        "x" : 0,
        "y", 0,
        "food_hour" : 500,
        "food_capacity" : 500,
        "energy_hour" : -44,
        "energy_capacity" : 500,
        "ore_hour" : -310,
        "ore_capacity" : 500,
        "water_hour" : -100,
        "water_capacity" : 500,
        "waste_hour" : 33,
        "waste_capacity" : 500,
        "happiness_hour" : 0,
        "efficiency" : 100,
        "repair_costs" : {
            "food" : 0,
            "water" : 0,
            "energy" : 0,
            "ore" : 0
        },
        "pending_build" : {                            # only included when building is building/upgrading
            "seconds_remaining" : 430,
            "start" : "01 31 2010 13:09:05 +0600",
            "end" : "01 31 2010 18:09:05 +0600"
        },
        "work" : {                                     # only included when building is working (Parks, Waste Recycling, etc)
            "seconds_remaining" : 49,
            "start" : "01 31 2010 13:09:05 +0600",
            "end" : "01 31 2010 18:09:05 +0600"
        },
        "upgrade" : {
            "can" : 0,
            "reason" : [1011, "Note enough resources.", "food"],
            "cost" : {
                "food" : 500,
                "water" : 500,
                "energy" : 500,
                "waste" : 500,
                "ore" : 1000,
                "time" : 1200,
            },
            "production" : {
                "food_hour" : 1500,
                "food_capacity" : 500,
                "energy_hour" : -144,
                "energy_capacity" : 500,
                "ore_hour" : -1310,
                "ore_capacity" : 500,
                "water_hour" : -1100,
                "water_capacity" : 500,
                "waste_hour" : 133,
                "waste_capacity" : 500,
                "happiness_hour" : 0,
            },
            "image" : "command7"
    },
    "status" : { ... }
 }

Throws 1002 and 1010.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to retrieve.



=head2 upgrade ( session_id, building_id )

Adds the requested upgrade to the build queue. Returns:

 {
    "building" : {
        "id" : "id-goes-here",
        "pending_build" : {
            "seconds_remaining" : 430,
            "start" : "01 31 2010 13:09:05 +0600",
            "end" : "01 31 2010 18:09:05 +0600"
        },
        "level" : 1,
    "status" : { ... }
 }

Throws 1002, 1010, 1011, and 1012, and 1013.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to retrieve.



=head2 demolish ( session_id, building_id )

Allows you to instantly destroy a building provided it wouldn't put you into a negative resource production situation. For example, if you're producing only a net positive of 100 food per hour, and you destroy a corn field that would take away 200 food per hour, then the game won't allow you to demolish that building.

 {
    "status" : { ... }
 }
 
Throws 1012.

=head3 session_id

A session id.

=head3

The unique id of the building.



=head2 get_stats_for_level ( session_id, building_id, level )

This method is for power users and script writers. It will return the projected stats of a building at a certain level. The building must already exist on the planet, because where it exists and who it is owned by affects the stats of the building. It returns

 {
    "building" : {
        "id" : "id-goes-here",
        "name" : "Planetary Command",
        "image" : "command6",
        "level" : 6,
        "food_hour" : 500,
        "food_capacity" : 500,
        "energy_hour" : -44,
        "energy_capacity" : 500,
        "ore_hour" : -310,
        "ore_capacity" : 500,
        "water_hour" : -100,
        "water_capacity" : 500,
        "waste_hour" : 33,
        "waste_capacity" : 500,
        "happiness_hour" : 0,
        "upgrade" : {
            "cost" : {
                "food" : 500,
                "water" : 500,
                "energy" : 500,
                "waste" : 500,
                "ore" : 1000,
                "time" : 1200,
            },
            "production" : {
                "food_hour" : 1500,
                "food_capacity" : 500,
                "energy_hour" : -144,
                "energy_capacity" : 500,
                "ore_hour" : -1310,
                "ore_capacity" : 500,
                "water_hour" : -1100,
                "water_capacity" : 500,
                "waste_hour" : 133,
                "waste_capacity" : 500,
                "happiness_hour" : 0,
            },
            "image" : "command7"
    },
    "status" : { ... }
 }

Throws 1009.

=head3 session_id

A session id.

=head3 building_id

The unique id of the building you want to get the stats for.

=head3 level

An integer between 1 and 100. This represents the stats that you want to see for the building.



=head2 repair ( session_id, building_id )

Restores a building's efficiency to 100%. See the C<repair_costs> section of the C<view> method to see how many resources will be spent in this process. Returns C<view>.

=head3 session_id

A session id.

=head3 building_id

The unique id of the building.




=head1 Building Types

Below is a list of the different types of structures that can be built on planets in Lacuna. They all share the above methods, but many have additional methods available.

=over

=item L<Algae>

=item L<Apple>

=item L<Archaeology>

=item L<Bean>

=item L<Beeldeban>

=item L<Bread>

=item L<Burger>

=item L<Cheese>

=item L<Chip>

=item L<Cider>

=item L<Corn>

=item L<CornMeal>

=item L<Crater>

=item L<Dairy>

=item L<Denton>

=item L<Development>

=item L<Embassy>

=item L<EnergyReserve>

=item L<Entertainment>

=item L<Espionage>

=item L<EssentiaVein>

=item L<Fission>

=item L<FoodReserve>

=item L<Fusion>

=item L<GasGiantLab>

=item L<GasGiantPlatform>

=item L<GeneticsLab>

=item L<Geo>

=item L<GeoThermalVent>

=item L<Hydrocarbon>

=item L<Intelligence>

=item L<InterDimensionalRift>

=item L<KalavianRuins>

=item L<Lake>

=item L<Lapis>

=item L<LibraryOfJith>

=item L<Malcud>

=item L<MassadsHenge>

=item L<Mine>

=item L<MiningMinistry>

=item L<NaturalSpring>

=item L<Network19>

=item L<Observatory>

=item L<OracleOfAnid>

=item L<OreRefinery>

=item L<OreStorage>

=item L<Oversight>

=item L<Pancake>

=item L<Park>

=item L<Pie>

=item L<PlanetaryCommand>

=item L<Potato>

=item L<Propulsion>

=item L<RockyOutcrop>

=item L<Security>

=item L<Shake>

=item L<Shipyard>

=item L<Singularity>

=item L<Soup>

=item L<SpacePort>

=item L<Syrup>

=item L<TempleOfTheDrajilites>

=item L<TerraformingLab>

=item L<TerraformingPlatform>

=item L<Trade>

=item L<Transporter>

=item L<University>

=item L<Volcano>

=item L<WasteDigester>

=item L<WasteEnergy>

=item L<WasteRecycling>

=item L<WasteSequestration>

=item L<WasteTreatment>

=item L<WaterProduction>

=item L<WaterPurification>

=item L<WaterReclamation>

=item L<WaterStorage>

=item L<Wheat>

=back

=cut
